/* tslint:disable */
/* eslint-disable */
/**
 * URLR API Reference
 * API powering the features of URLR.<br><br>Note that in order to facilitate integration, we provide SDKs for various languages at https://github.com/URLR.<br><br>Key API principles:<br>         <ul><li>All dates follow **ISO-8601** format</li><li>Most errors follow **RFC 9457** standard</li><li>All responses are delivered in English</li></ul>
 *
 * The version of the OpenAPI document: 1.10
 * Contact: contact@urlr.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateLink429Response,
  CreateLinkRequest,
  EditLink500Response,
  EditLinkRequest,
  GetLink200Response,
  GetLink401Response,
  GetLink404Response,
  GetLink422Response,
} from '../models/index';
import {
    CreateLink429ResponseFromJSON,
    CreateLink429ResponseToJSON,
    CreateLinkRequestFromJSON,
    CreateLinkRequestToJSON,
    EditLink500ResponseFromJSON,
    EditLink500ResponseToJSON,
    EditLinkRequestFromJSON,
    EditLinkRequestToJSON,
    GetLink200ResponseFromJSON,
    GetLink200ResponseToJSON,
    GetLink401ResponseFromJSON,
    GetLink401ResponseToJSON,
    GetLink404ResponseFromJSON,
    GetLink404ResponseToJSON,
    GetLink422ResponseFromJSON,
    GetLink422ResponseToJSON,
} from '../models/index';

export interface CreateLinkOperationRequest {
    createLinkRequest?: CreateLinkRequest;
}

export interface EditLinkOperationRequest {
    linkId: string;
    editLinkRequest?: EditLinkRequest;
}

export interface GetLinkRequest {
    linkId: string;
}

/**
 * 
 */
export class LinksApi extends runtime.BaseAPI {

    /**
     * Create a link
     */
    async createLinkRaw(requestParameters: CreateLinkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLink200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLinkRequestToJSON(requestParameters['createLinkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLink200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a link
     */
    async createLink(requestParameters: CreateLinkOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLink200Response> {
        const response = await this.createLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit a link
     */
    async editLinkRaw(requestParameters: EditLinkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLink200Response>> {
        if (requestParameters['linkId'] == null) {
            throw new runtime.RequiredError(
                'linkId',
                'Required parameter "linkId" was null or undefined when calling editLink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/{link_id}`;
        urlPath = urlPath.replace(`{${"link_id"}}`, encodeURIComponent(String(requestParameters['linkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EditLinkRequestToJSON(requestParameters['editLinkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLink200ResponseFromJSON(jsonValue));
    }

    /**
     * Edit a link
     */
    async editLink(requestParameters: EditLinkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLink200Response> {
        const response = await this.editLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a link
     */
    async getLinkRaw(requestParameters: GetLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLink200Response>> {
        if (requestParameters['linkId'] == null) {
            throw new runtime.RequiredError(
                'linkId',
                'Required parameter "linkId" was null or undefined when calling getLink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/links/{link_id}`;
        urlPath = urlPath.replace(`{${"link_id"}}`, encodeURIComponent(String(requestParameters['linkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLink200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a link
     */
    async getLink(requestParameters: GetLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLink200Response> {
        const response = await this.getLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
