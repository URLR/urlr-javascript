/* tslint:disable */
/* eslint-disable */
/**
 * URLR API Reference
 * API powering the features of URLR.<br><br>Note that in order to facilitate integration, we provide SDKs for various languages at https://github.com/URLR.<br><br>Key API principles:<br>         <ul><li>All dates follow **ISO-8601** format</li><li>Most errors follow **RFC 9457** standard</li><li>All responses are delivered in English</li></ul>
 *
 * The version of the OpenAPI document: 1.10
 * Contact: contact@urlr.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GetLink200ResponseUtm } from './GetLink200ResponseUtm';
import {
    GetLink200ResponseUtmFromJSON,
    GetLink200ResponseUtmFromJSONTyped,
    GetLink200ResponseUtmToJSON,
    GetLink200ResponseUtmToJSONTyped,
} from './GetLink200ResponseUtm';
import type { GetLink200ResponseGeolinksInner } from './GetLink200ResponseGeolinksInner';
import {
    GetLink200ResponseGeolinksInnerFromJSON,
    GetLink200ResponseGeolinksInnerFromJSONTyped,
    GetLink200ResponseGeolinksInnerToJSON,
    GetLink200ResponseGeolinksInnerToJSONTyped,
} from './GetLink200ResponseGeolinksInner';
import type { BaseLinkRequestQrcode } from './BaseLinkRequestQrcode';
import {
    BaseLinkRequestQrcodeFromJSON,
    BaseLinkRequestQrcodeFromJSONTyped,
    BaseLinkRequestQrcodeToJSON,
    BaseLinkRequestQrcodeToJSONTyped,
} from './BaseLinkRequestQrcode';
import type { BaseLinkRequestMetatag } from './BaseLinkRequestMetatag';
import {
    BaseLinkRequestMetatagFromJSON,
    BaseLinkRequestMetatagFromJSONTyped,
    BaseLinkRequestMetatagToJSON,
    BaseLinkRequestMetatagToJSONTyped,
} from './BaseLinkRequestMetatag';

/**
 * 
 * @export
 * @interface EditLinkRequest
 */
export interface EditLinkRequest {
    /**
     * URL to shorten
     * @type {string}
     * @memberof EditLinkRequest
     */
    url?: string;
    /**
     * Folder API ID
     * @type {string}
     * @memberof EditLinkRequest
     */
    folderId?: string;
    /**
     * Domain
     * @type {string}
     * @memberof EditLinkRequest
     */
    domain?: string;
    /**
     * Custom short code
     * @type {string}
     * @memberof EditLinkRequest
     */
    code?: string;
    /**
     * Label
     * @type {string}
     * @memberof EditLinkRequest
     */
    label?: string;
    /**
     * Tags
     * @type {Array<string>}
     * @memberof EditLinkRequest
     */
    tags?: Array<string>;
    /**
     * Password
     * @type {string}
     * @memberof EditLinkRequest
     */
    password?: string;
    /**
     * 
     * @type {BaseLinkRequestQrcode}
     * @memberof EditLinkRequest
     */
    qrcode?: BaseLinkRequestQrcode;
    /**
     * 
     * @type {GetLink200ResponseUtm}
     * @memberof EditLinkRequest
     */
    utm?: GetLink200ResponseUtm;
    /**
     * 
     * @type {BaseLinkRequestMetatag}
     * @memberof EditLinkRequest
     */
    metatag?: BaseLinkRequestMetatag;
    /**
     * Dynamic routing conditions
     * @type {Array<GetLink200ResponseGeolinksInner>}
     * @memberof EditLinkRequest
     */
    geolinks?: Array<GetLink200ResponseGeolinksInner>;
    /**
     * Scheduled deletion date
     * @type {Date}
     * @memberof EditLinkRequest
     */
    deleteAt?: Date;
    /**
     * Scheduled expiration date
     * @type {Date}
     * @memberof EditLinkRequest
     */
    expiredAt?: Date;
    /**
     * Expiration URL
     * @type {string}
     * @memberof EditLinkRequest
     */
    expiredUrl?: string;
    /**
     * Whether or not to remove the link after the expiry date
     * @type {boolean}
     * @memberof EditLinkRequest
     */
    deleteAfterExpiration?: boolean;
}

/**
 * Check if a given object implements the EditLinkRequest interface.
 */
export function instanceOfEditLinkRequest(value: object): value is EditLinkRequest {
    return true;
}

export function EditLinkRequestFromJSON(json: any): EditLinkRequest {
    return EditLinkRequestFromJSONTyped(json, false);
}

export function EditLinkRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): EditLinkRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'] == null ? undefined : json['url'],
        'folderId': json['folder_id'] == null ? undefined : json['folder_id'],
        'domain': json['domain'] == null ? undefined : json['domain'],
        'code': json['code'] == null ? undefined : json['code'],
        'label': json['label'] == null ? undefined : json['label'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'password': json['password'] == null ? undefined : json['password'],
        'qrcode': json['qrcode'] == null ? undefined : BaseLinkRequestQrcodeFromJSON(json['qrcode']),
        'utm': json['utm'] == null ? undefined : GetLink200ResponseUtmFromJSON(json['utm']),
        'metatag': json['metatag'] == null ? undefined : BaseLinkRequestMetatagFromJSON(json['metatag']),
        'geolinks': json['geolinks'] == null ? undefined : ((json['geolinks'] as Array<any>).map(GetLink200ResponseGeolinksInnerFromJSON)),
        'deleteAt': json['delete_at'] == null ? undefined : (new Date(json['delete_at'])),
        'expiredAt': json['expired_at'] == null ? undefined : (new Date(json['expired_at'])),
        'expiredUrl': json['expired_url'] == null ? undefined : json['expired_url'],
        'deleteAfterExpiration': json['delete_after_expiration'] == null ? undefined : json['delete_after_expiration'],
    };
}

export function EditLinkRequestToJSON(json: any): EditLinkRequest {
    return EditLinkRequestToJSONTyped(json, false);
}

export function EditLinkRequestToJSONTyped(value?: EditLinkRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'url': value['url'],
        'folder_id': value['folderId'],
        'domain': value['domain'],
        'code': value['code'],
        'label': value['label'],
        'tags': value['tags'],
        'password': value['password'],
        'qrcode': BaseLinkRequestQrcodeToJSON(value['qrcode']),
        'utm': GetLink200ResponseUtmToJSON(value['utm']),
        'metatag': BaseLinkRequestMetatagToJSON(value['metatag']),
        'geolinks': value['geolinks'] == null ? undefined : ((value['geolinks'] as Array<any>).map(GetLink200ResponseGeolinksInnerToJSON)),
        'delete_at': value['deleteAt'] == null ? undefined : ((value['deleteAt']).toISOString()),
        'expired_at': value['expiredAt'] == null ? undefined : ((value['expiredAt']).toISOString()),
        'expired_url': value['expiredUrl'],
        'delete_after_expiration': value['deleteAfterExpiration'],
    };
}

