/* tslint:disable */
/* eslint-disable */
/**
 * URLR API Reference
 * API powering the features of URLR.<br><br>Note that in order to facilitate integration, we provide SDKs for various languages at https://github.com/URLR.<br><br>Key API principles:<br>         <ul><li>All dates follow **ISO-8601** format</li><li>Most errors follow **RFC 9457** standard</li><li>All responses are delivered in English</li></ul>
 *
 * The version of the OpenAPI document: 1.12
 * Contact: contact@urlr.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LinkQrcode } from './LinkQrcode';
import {
    LinkQrcodeFromJSON,
    LinkQrcodeFromJSONTyped,
    LinkQrcodeToJSON,
    LinkQrcodeToJSONTyped,
} from './LinkQrcode';
import type { LinkUtm } from './LinkUtm';
import {
    LinkUtmFromJSON,
    LinkUtmFromJSONTyped,
    LinkUtmToJSON,
    LinkUtmToJSONTyped,
} from './LinkUtm';
import type { LinkTagsInner } from './LinkTagsInner';
import {
    LinkTagsInnerFromJSON,
    LinkTagsInnerFromJSONTyped,
    LinkTagsInnerToJSON,
    LinkTagsInnerToJSONTyped,
} from './LinkTagsInner';
import type { LinkGeolinksInner } from './LinkGeolinksInner';
import {
    LinkGeolinksInnerFromJSON,
    LinkGeolinksInnerFromJSONTyped,
    LinkGeolinksInnerToJSON,
    LinkGeolinksInnerToJSONTyped,
} from './LinkGeolinksInner';
import type { LinkMetatag } from './LinkMetatag';
import {
    LinkMetatagFromJSON,
    LinkMetatagFromJSONTyped,
    LinkMetatagToJSON,
    LinkMetatagToJSONTyped,
} from './LinkMetatag';

/**
 * 
 * @export
 * @interface Link
 */
export interface Link {
    /**
     * Link API ID
     * @type {string}
     * @memberof Link
     */
    id?: string;
    /**
     * Original URL
     * @type {string}
     * @memberof Link
     */
    url?: string;
    /**
     * Workspace API ID
     * @type {string}
     * @memberof Link
     */
    teamId?: string;
    /**
     * Folder API ID
     * @type {string}
     * @memberof Link
     */
    folderId?: string;
    /**
     * Domain
     * @type {string}
     * @memberof Link
     */
    domain?: string;
    /**
     * Short code
     * @type {string}
     * @memberof Link
     */
    code?: string;
    /**
     * Label
     * @type {string}
     * @memberof Link
     */
    label?: string;
    /**
     * Tags
     * @type {Array<LinkTagsInner>}
     * @memberof Link
     */
    tags?: Array<LinkTagsInner>;
    /**
     * Password: "**********" means a password exists; null means no password.
     * @type {string}
     * @memberof Link
     */
    password?: string;
    /**
     * 
     * @type {LinkQrcode}
     * @memberof Link
     */
    qrcode?: LinkQrcode;
    /**
     * 
     * @type {LinkUtm}
     * @memberof Link
     */
    utm?: LinkUtm;
    /**
     * 
     * @type {LinkMetatag}
     * @memberof Link
     */
    metatag?: LinkMetatag;
    /**
     * Dynamic routing conditions
     * @type {Array<LinkGeolinksInner>}
     * @memberof Link
     */
    geolinks?: Array<LinkGeolinksInner>;
    /**
     * Creation date
     * @type {Date}
     * @memberof Link
     */
    createdAt?: Date;
    /**
     * Modification date
     * @type {Date}
     * @memberof Link
     */
    updatedAt?: Date;
    /**
     * Scheduled deletion date
     * @type {Date}
     * @memberof Link
     */
    deleteAt?: Date;
    /**
     * Scheduled expiration date
     * @type {Date}
     * @memberof Link
     */
    expiredAt?: Date;
    /**
     * Expiration URL
     * @type {string}
     * @memberof Link
     */
    expiredUrl?: string;
    /**
     * Whether or not to remove the link after the expiry date
     * @type {boolean}
     * @memberof Link
     */
    deleteAfterExpiration?: boolean;
}

/**
 * Check if a given object implements the Link interface.
 */
export function instanceOfLink(value: object): value is Link {
    return true;
}

export function LinkFromJSON(json: any): Link {
    return LinkFromJSONTyped(json, false);
}

export function LinkFromJSONTyped(json: any, ignoreDiscriminator: boolean): Link {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'url': json['url'] == null ? undefined : json['url'],
        'teamId': json['team_id'] == null ? undefined : json['team_id'],
        'folderId': json['folder_id'] == null ? undefined : json['folder_id'],
        'domain': json['domain'] == null ? undefined : json['domain'],
        'code': json['code'] == null ? undefined : json['code'],
        'label': json['label'] == null ? undefined : json['label'],
        'tags': json['tags'] == null ? undefined : ((json['tags'] as Array<any>).map(LinkTagsInnerFromJSON)),
        'password': json['password'] == null ? undefined : json['password'],
        'qrcode': json['qrcode'] == null ? undefined : LinkQrcodeFromJSON(json['qrcode']),
        'utm': json['utm'] == null ? undefined : LinkUtmFromJSON(json['utm']),
        'metatag': json['metatag'] == null ? undefined : LinkMetatagFromJSON(json['metatag']),
        'geolinks': json['geolinks'] == null ? undefined : ((json['geolinks'] as Array<any>).map(LinkGeolinksInnerFromJSON)),
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'deleteAt': json['delete_at'] == null ? undefined : (new Date(json['delete_at'])),
        'expiredAt': json['expired_at'] == null ? undefined : (new Date(json['expired_at'])),
        'expiredUrl': json['expired_url'] == null ? undefined : json['expired_url'],
        'deleteAfterExpiration': json['delete_after_expiration'] == null ? undefined : json['delete_after_expiration'],
    };
}

export function LinkToJSON(json: any): Link {
    return LinkToJSONTyped(json, false);
}

export function LinkToJSONTyped(value?: Link | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'url': value['url'],
        'team_id': value['teamId'],
        'folder_id': value['folderId'],
        'domain': value['domain'],
        'code': value['code'],
        'label': value['label'],
        'tags': value['tags'] == null ? undefined : ((value['tags'] as Array<any>).map(LinkTagsInnerToJSON)),
        'password': value['password'],
        'qrcode': LinkQrcodeToJSON(value['qrcode']),
        'utm': LinkUtmToJSON(value['utm']),
        'metatag': LinkMetatagToJSON(value['metatag']),
        'geolinks': value['geolinks'] == null ? undefined : ((value['geolinks'] as Array<any>).map(LinkGeolinksInnerToJSON)),
        'created_at': value['createdAt'] == null ? value['createdAt'] : value['createdAt'].toISOString(),
        'updated_at': value['updatedAt'] == null ? value['updatedAt'] : value['updatedAt'].toISOString(),
        'delete_at': value['deleteAt'] == null ? value['deleteAt'] : value['deleteAt'].toISOString(),
        'expired_at': value['expiredAt'] == null ? value['expiredAt'] : value['expiredAt'].toISOString(),
        'expired_url': value['expiredUrl'],
        'delete_after_expiration': value['deleteAfterExpiration'],
    };
}

