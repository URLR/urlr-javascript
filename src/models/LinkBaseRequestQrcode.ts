/* tslint:disable */
/* eslint-disable */
/**
 * URLR API Reference
 * API powering the features of URLR.<br><br>Note that in order to facilitate integration, we provide SDKs for various languages at https://github.com/URLR.<br><br>Key API principles:<br>         <ul><li>All dates follow **ISO-8601** format</li><li>Most errors follow **RFC 9457** standard</li><li>All responses are delivered in English</li></ul>
 *
 * The version of the OpenAPI document: 1.10
 * Contact: contact@urlr.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * QR Code
 * @export
 * @interface LinkBaseRequestQrcode
 */
export interface LinkBaseRequestQrcode {
    /**
     * The size of the QR code (px)
     * @type {number}
     * @memberof LinkBaseRequestQrcode
     */
    size?: number;
    /**
     * The format of the QR code
     * @type {string}
     * @memberof LinkBaseRequestQrcode
     */
    format?: LinkBaseRequestQrcodeFormatEnum;
    /**
     * The margin around the QR code (px)
     * @type {number}
     * @memberof LinkBaseRequestQrcode
     */
    margin?: number;
    /**
     * The background color of the QR code (hexadecimal)
     * @type {string}
     * @memberof LinkBaseRequestQrcode
     */
    backgroundColor?: string;
    /**
     * The foreground color of the QR code (hexadecimal)
     * @type {string}
     * @memberof LinkBaseRequestQrcode
     */
    foregroundColor?: string;
}


/**
 * @export
 */
export const LinkBaseRequestQrcodeFormatEnum = {
    Png: 'png',
    Webp: 'webp',
    Svg: 'svg'
} as const;
export type LinkBaseRequestQrcodeFormatEnum = typeof LinkBaseRequestQrcodeFormatEnum[keyof typeof LinkBaseRequestQrcodeFormatEnum];


/**
 * Check if a given object implements the LinkBaseRequestQrcode interface.
 */
export function instanceOfLinkBaseRequestQrcode(value: object): value is LinkBaseRequestQrcode {
    return true;
}

export function LinkBaseRequestQrcodeFromJSON(json: any): LinkBaseRequestQrcode {
    return LinkBaseRequestQrcodeFromJSONTyped(json, false);
}

export function LinkBaseRequestQrcodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): LinkBaseRequestQrcode {
    if (json == null) {
        return json;
    }
    return {
        
        'size': json['size'] == null ? undefined : json['size'],
        'format': json['format'] == null ? undefined : json['format'],
        'margin': json['margin'] == null ? undefined : json['margin'],
        'backgroundColor': json['background_color'] == null ? undefined : json['background_color'],
        'foregroundColor': json['foreground_color'] == null ? undefined : json['foreground_color'],
    };
}

export function LinkBaseRequestQrcodeToJSON(json: any): LinkBaseRequestQrcode {
    return LinkBaseRequestQrcodeToJSONTyped(json, false);
}

export function LinkBaseRequestQrcodeToJSONTyped(value?: LinkBaseRequestQrcode | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'size': value['size'],
        'format': value['format'],
        'margin': value['margin'],
        'background_color': value['backgroundColor'],
        'foreground_color': value['foregroundColor'],
    };
}

