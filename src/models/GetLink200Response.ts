/* tslint:disable */
/* eslint-disable */
/**
 * URLR API Reference
 * API powering the features of URLR.<br><br>Note that in order to facilitate integration, we provide SDKs for various languages at https://github.com/URLR.<br><br>Key API principles:<br>         <ul><li>All dates follow **ISO-8601** format</li><li>Most errors follow **RFC 9457** standard</li><li>All responses are delivered in English</li></ul>
 *
 * The version of the OpenAPI document: 1.9
 * Contact: contact@urlr.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GetLink200ResponseMetatag } from './GetLink200ResponseMetatag';
import {
    GetLink200ResponseMetatagFromJSON,
    GetLink200ResponseMetatagFromJSONTyped,
    GetLink200ResponseMetatagToJSON,
    GetLink200ResponseMetatagToJSONTyped,
} from './GetLink200ResponseMetatag';
import type { GetLink200ResponseTagsInner } from './GetLink200ResponseTagsInner';
import {
    GetLink200ResponseTagsInnerFromJSON,
    GetLink200ResponseTagsInnerFromJSONTyped,
    GetLink200ResponseTagsInnerToJSON,
    GetLink200ResponseTagsInnerToJSONTyped,
} from './GetLink200ResponseTagsInner';
import type { GetLink200ResponseUtm } from './GetLink200ResponseUtm';
import {
    GetLink200ResponseUtmFromJSON,
    GetLink200ResponseUtmFromJSONTyped,
    GetLink200ResponseUtmToJSON,
    GetLink200ResponseUtmToJSONTyped,
} from './GetLink200ResponseUtm';
import type { GetLink200ResponseGeolinksInner } from './GetLink200ResponseGeolinksInner';
import {
    GetLink200ResponseGeolinksInnerFromJSON,
    GetLink200ResponseGeolinksInnerFromJSONTyped,
    GetLink200ResponseGeolinksInnerToJSON,
    GetLink200ResponseGeolinksInnerToJSONTyped,
} from './GetLink200ResponseGeolinksInner';
import type { GetLink200ResponseQrcode } from './GetLink200ResponseQrcode';
import {
    GetLink200ResponseQrcodeFromJSON,
    GetLink200ResponseQrcodeFromJSONTyped,
    GetLink200ResponseQrcodeToJSON,
    GetLink200ResponseQrcodeToJSONTyped,
} from './GetLink200ResponseQrcode';

/**
 * 
 * @export
 * @interface GetLink200Response
 */
export interface GetLink200Response {
    /**
     * Link API ID
     * @type {string}
     * @memberof GetLink200Response
     */
    id?: string;
    /**
     * Original URL
     * @type {string}
     * @memberof GetLink200Response
     */
    url?: string;
    /**
     * Team API ID
     * @type {string}
     * @memberof GetLink200Response
     */
    teamId?: string;
    /**
     * Folder API ID
     * @type {string}
     * @memberof GetLink200Response
     */
    folderId?: string;
    /**
     * Domain
     * @type {string}
     * @memberof GetLink200Response
     */
    domain?: string;
    /**
     * Short code
     * @type {string}
     * @memberof GetLink200Response
     */
    code?: string;
    /**
     * Label
     * @type {string}
     * @memberof GetLink200Response
     */
    label?: string;
    /**
     * Tags
     * @type {Array<GetLink200ResponseTagsInner>}
     * @memberof GetLink200Response
     */
    tags?: Array<GetLink200ResponseTagsInner>;
    /**
     * 
     * @type {GetLink200ResponseQrcode}
     * @memberof GetLink200Response
     */
    qrcode?: GetLink200ResponseQrcode;
    /**
     * 
     * @type {GetLink200ResponseUtm}
     * @memberof GetLink200Response
     */
    utm?: GetLink200ResponseUtm;
    /**
     * 
     * @type {GetLink200ResponseMetatag}
     * @memberof GetLink200Response
     */
    metatag?: GetLink200ResponseMetatag;
    /**
     * Dynamic routing conditions
     * @type {Array<GetLink200ResponseGeolinksInner>}
     * @memberof GetLink200Response
     */
    geolinks?: Array<GetLink200ResponseGeolinksInner>;
    /**
     * Creation date
     * @type {Date}
     * @memberof GetLink200Response
     */
    createdAt?: Date;
    /**
     * Modification date
     * @type {Date}
     * @memberof GetLink200Response
     */
    updatedAt?: Date;
    /**
     * Scheduled deletion date
     * @type {Date}
     * @memberof GetLink200Response
     */
    deleteAt?: Date;
    /**
     * Scheduled expiration date
     * @type {Date}
     * @memberof GetLink200Response
     */
    expiredAt?: Date;
    /**
     * Expiration URL
     * @type {string}
     * @memberof GetLink200Response
     */
    expiredUrl?: string;
    /**
     * Whether or not to remove the link after the expiry date
     * @type {boolean}
     * @memberof GetLink200Response
     */
    deleteAfterExpiration?: boolean;
}

/**
 * Check if a given object implements the GetLink200Response interface.
 */
export function instanceOfGetLink200Response(value: object): value is GetLink200Response {
    return true;
}

export function GetLink200ResponseFromJSON(json: any): GetLink200Response {
    return GetLink200ResponseFromJSONTyped(json, false);
}

export function GetLink200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetLink200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'url': json['url'] == null ? undefined : json['url'],
        'teamId': json['team_id'] == null ? undefined : json['team_id'],
        'folderId': json['folder_id'] == null ? undefined : json['folder_id'],
        'domain': json['domain'] == null ? undefined : json['domain'],
        'code': json['code'] == null ? undefined : json['code'],
        'label': json['label'] == null ? undefined : json['label'],
        'tags': json['tags'] == null ? undefined : ((json['tags'] as Array<any>).map(GetLink200ResponseTagsInnerFromJSON)),
        'qrcode': json['qrcode'] == null ? undefined : GetLink200ResponseQrcodeFromJSON(json['qrcode']),
        'utm': json['utm'] == null ? undefined : GetLink200ResponseUtmFromJSON(json['utm']),
        'metatag': json['metatag'] == null ? undefined : GetLink200ResponseMetatagFromJSON(json['metatag']),
        'geolinks': json['geolinks'] == null ? undefined : ((json['geolinks'] as Array<any>).map(GetLink200ResponseGeolinksInnerFromJSON)),
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'deleteAt': json['delete_at'] == null ? undefined : (new Date(json['delete_at'])),
        'expiredAt': json['expired_at'] == null ? undefined : (new Date(json['expired_at'])),
        'expiredUrl': json['expired_url'] == null ? undefined : json['expired_url'],
        'deleteAfterExpiration': json['delete_after_expiration'] == null ? undefined : json['delete_after_expiration'],
    };
}

export function GetLink200ResponseToJSON(json: any): GetLink200Response {
    return GetLink200ResponseToJSONTyped(json, false);
}

export function GetLink200ResponseToJSONTyped(value?: GetLink200Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'url': value['url'],
        'team_id': value['teamId'],
        'folder_id': value['folderId'],
        'domain': value['domain'],
        'code': value['code'],
        'label': value['label'],
        'tags': value['tags'] == null ? undefined : ((value['tags'] as Array<any>).map(GetLink200ResponseTagsInnerToJSON)),
        'qrcode': GetLink200ResponseQrcodeToJSON(value['qrcode']),
        'utm': GetLink200ResponseUtmToJSON(value['utm']),
        'metatag': GetLink200ResponseMetatagToJSON(value['metatag']),
        'geolinks': value['geolinks'] == null ? undefined : ((value['geolinks'] as Array<any>).map(GetLink200ResponseGeolinksInnerToJSON)),
        'created_at': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updated_at': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'delete_at': value['deleteAt'] == null ? undefined : ((value['deleteAt']).toISOString()),
        'expired_at': value['expiredAt'] == null ? undefined : ((value['expiredAt']).toISOString()),
        'expired_url': value['expiredUrl'],
        'delete_after_expiration': value['deleteAfterExpiration'],
    };
}

